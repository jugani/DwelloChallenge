package com.jm;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;


public class FriendshipGame {
    static  HashMap<Integer, Set> tokenMap = new HashMap<>();
    static HashMap< Set, Integer> friendsCountMapping = new HashMap<>();
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //read space separted inputs for edge and node
        String nodesandEdges = br.readLine();
        String inputarray[] = nodesandEdges.split(" ");
        int friend_nodes = Integer.valueOf(inputarray[0]);
        int friens_edges = Integer.valueOf(inputarray[1]);
        // get the tokens and pair
        while (friens_edges != 0) {
            String tokenofFriendNodes = br.readLine();
            String inputTokenArr[] = tokenofFriendNodes.split(" ");

            //lets have the token value as the key for map
            Integer key = Integer.valueOf(inputTokenArr[2]);
            if (tokenMap.containsKey(key)) {
                Set availableset = tokenMap.get(key);
                availableset.add(inputTokenArr[0]);
                availableset.add(inputTokenArr[1]);
                tokenMap.put(key, availableset);
            } else {
                Set set = new HashSet();
                set.add(inputTokenArr[0]);
                set.add(inputTokenArr[1]);
                tokenMap.put(key, set);
            }

            friens_edges--;
        }
        for (Integer name : tokenMap.keySet()) {

            String key = name.toString();
            String value = tokenMap.get(name).toString();


        }


        System.out.println(minimalproduct(tokenMap));
    }


    static int minimalproduct(HashMap<Integer, Set> tokenMap)
    {

        for (Integer name : tokenMap.keySet()) {

            String key = name.toString();
            Set set = tokenMap.get(name);
            String  arr[]= new String[set.size()];


            System.arraycopy(set.toArray(), 0, arr, 0, set.size());
            for (int i=0;i<arr.length;i++) {
                for (int j=(i+1);j<arr.length;j++){

                    Set<Integer> friends= new HashSet();
                    friends.add(Integer.valueOf(arr[i]));
                    friends.add(Integer.valueOf(arr[j]));

                    if(friendsCountMapping.containsKey(friends)){
                        Integer count =friendsCountMapping.get(friends);
                        count= new Integer(count.intValue()+ 1);
                        friendsCountMapping.put(friends, count);

                    }else{
                        friendsCountMapping.put(friends, Integer.valueOf("1"));
                    }
                }
            }

        }

       return getRichFriends(friendsCountMapping);




    }


        static int getRichFriends(HashMap< Set, Integer> friendsCountMapping){
        int maxSharedToken=(Collections.max(friendsCountMapping.values()));
        int minimalproduct=0;
        for (Map.Entry<Set, Integer> entry : friendsCountMapping.entrySet()){
               if(entry.getValue() == maxSharedToken){
                   Set s= entry.getKey();
                   int product = getproduct(s);
                   if(product > minimalproduct)
                   {
                       minimalproduct=product;
                   }


               }
        }


           return minimalproduct;


    }
 static int getproduct(Set<Integer> s){
            int product = 1;
     for (Integer i: s
          ) {
         product*= i.intValue();

     }
     return product;
 }

}



